#!/usr/bin/env python3
"""
Debug da navega√ß√£o - investigar por que a navega√ß√£o est√° falhando
"""

import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

def debug_navigation():
    """Debug detalhado da navega√ß√£o"""
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=400,300")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        file_path = "creative-v2/sebrae_carousel_300x250_PEQUENOS_NEGOCIOS.html"
        file_url = f"file://{os.path.abspath(file_path)}"
        driver.get(file_url)
        time.sleep(3)
        
        print("üîç DEBUG DA NAVEGA√á√ÉO")
        print("=" * 50)
        
        # Estado inicial
        print("üìä ESTADO INICIAL:")
        slides = driver.find_elements(By.CSS_SELECTOR, ".slide")
        print(f"   Total de slides: {len(slides)}")
        
        # Verifica slide atual
        track = driver.find_element(By.CSS_SELECTOR, "#track")
        transform = track.get_attribute("style")
        print(f"   Transform inicial: {transform}")
        
        # Clica no bot√£o inicial
        print("\nüîÑ CLICANDO NO BOT√ÉO INICIAL:")
        start_button = driver.find_element(By.CSS_SELECTOR, ".button[data-action='start']")
        print(f"   Bot√£o encontrado: {start_button.text}")
        start_button.click()
        time.sleep(2)
        
        # Verifica estado ap√≥s clique
        transform_after = track.get_attribute("style")
        print(f"   Transform ap√≥s clique: {transform_after}")
        
        # Verifica header da pergunta
        try:
            header = driver.find_element(By.CSS_SELECTOR, ".header .step")
            print(f"   Header da pergunta: '{header.text}'")
        except:
            print("   ‚ùå Header n√£o encontrado!")
            
        # Verifica se h√° op√ß√µes de r√°dio
        radios = driver.find_elements(By.CSS_SELECTOR, "input[type='radio']")
        print(f"   Op√ß√µes de r√°dio encontradas: {len(radios)}")
        
        # Seleciona uma op√ß√£o
        if radios:
            print("\nüîÑ SELECIONANDO OP√á√ÉO DE R√ÅDIO:")
            first_radio = radios[0]
            first_radio.click()
            time.sleep(1)
            print(f"   R√°dio selecionado: {first_radio.is_selected()}")
            
            # Tenta navegar para pr√≥xima
            print("\nüîÑ TENTANDO NAVEGAR PARA PR√ìXIMA:")
            try:
                next_button = driver.find_element(By.CSS_SELECTOR, "#next")
                print(f"   Bot√£o 'Pr√≥xima' encontrado: {next_button.text}")
                next_button.click()
                time.sleep(2)
                
                # Verifica estado ap√≥s navega√ß√£o
                transform_final = track.get_attribute("style")
                print(f"   Transform ap√≥s navega√ß√£o: {transform_final}")
                
                # Verifica header da pr√≥xima pergunta
                try:
                    header_next = driver.find_element(By.CSS_SELECTOR, ".header .step")
                    print(f"   Header da pr√≥xima pergunta: '{header_next.text}'")
                except:
                    print("   ‚ùå Header da pr√≥xima pergunta n√£o encontrado!")
                    
            except Exception as e:
                print(f"   ‚ùå Erro ao navegar: {str(e)}")
        
        # Verifica JavaScript no console
        print("\nüìã LOGS DO JAVASCRIPT:")
        logs = driver.get_log('browser')
        for log in logs[-5:]:  # √öltimos 5 logs
            print(f"   {log['level']}: {log['message']}")
            
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
    finally:
        driver.quit()

if __name__ == "__main__":
    debug_navigation()
